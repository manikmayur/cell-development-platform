# ===============================================================================
# Conversation-Scoped State Management System
# ===============================================================================


# ===============================================================================
# State Management Helper Functions
# ===============================================================================


from typing import Dict, List


def extract_keywords_from_parameters(cell_design_params: Dict) -> List[str]:
    """Extract meaningful keywords from cell design parameters."""
    keywords = []

    # Form factor
    if "Form factor" in cell_design_params:
        keywords.append(cell_design_params["Form factor"].lower())

    # Electrode formulations
    for electrode_type in [
        "Positive electrode formulation",
        "Negative electrode formulation",
    ]:
        if electrode_type in cell_design_params:
            formulation = cell_design_params[electrode_type]
            if isinstance(formulation, str):
                keywords.append(formulation.lower())
            elif isinstance(formulation, dict) and "Name" in formulation:
                keywords.append(formulation["Name"].lower())

    # Cell type indicators
    if "Form factor" in cell_design_params:
        form_factor = cell_design_params["Form factor"].lower()
        if "cylindrical" in form_factor:
            keywords.append("cylindrical")
        elif "prismatic" in form_factor:
            keywords.append("prismatic")
        elif "pouch" in form_factor:
            keywords.append("pouch")
    if (
        "Cell diameter [mm]" in cell_design_params
        and "Cell height [mm]" in cell_design_params
    ):
        keywords.append(
            f"{cell_design_params['Cell diameter [mm]']}{cell_design_params['Cell height [mm]']}".lower()
        )

    # Power/capacity indicators
    if "Cell nominal capacity [A.h]" in cell_design_params:
        capacity = round(cell_design_params["Cell nominal capacity [A.h]"], 0)
        keywords.append(f"{capacity}Ah".lower())

    # Chemistry-specific keywords
    chemistry_keywords = ["nmc", "lfp", "lco", "nca", "lto", "graphite", "silicon"]
    for keyword in chemistry_keywords:
        if any(keyword in str(v).lower() for v in cell_design_params.values() if v):
            keywords.append(keyword)

    return list(set(keywords))  # Remove duplicates


def generate_context_description(tool_name: str, parameters: Dict) -> str:
    """Generate a context description for the tool call."""
    context_parts = [f"Generated by {tool_name}"]

    if "Form factor" in parameters:
        context_parts.append(f"{parameters['Form factor']} cell")

        if (
            parameters["Form factor"].lower() == "cylindrical"
            and "Cell diameter [mm]" in parameters
            and "Cell height [mm]" in parameters
        ):
            context_parts.append(
                f"Ø{parameters['Cell diameter [mm]']} × {parameters['Cell height [mm]']}mm"
            )
        elif (
            "Cell width [mm]" in parameters
            and "Cell height [mm]" in parameters
            and "Cell thickness [mm]" in parameters
        ):
            context_parts.append(
                f"{parameters['Cell width [mm]']} × {parameters['Cell height [mm]']} × {parameters['Cell thickness [mm]']}mm"
            )
    if "Positive electrode formulation" in parameters:
        formulation = parameters["Positive electrode formulation"]
        if isinstance(formulation, str):
            context_parts.append(f"{formulation}")
        elif isinstance(formulation, dict) and "Name" in formulation:
            context_parts.append(f"{formulation['Name']}")
    if "Negative electrode formulation" in parameters:
        formulation = parameters["Negative electrode formulation"]
        if isinstance(formulation, str):
            context_parts.append(f"{formulation}")
        elif isinstance(formulation, dict) and "Name" in formulation:
            context_parts.append(f"{formulation['Name']}")
    if "Cell nominal capacity [A.h]" in parameters:
        capacity = round(parameters["Cell nominal capacity [A.h]"], 0)
        context_parts.append(f"{capacity}Ah")
    return " - ".join(context_parts)
